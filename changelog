v0.04
  * NN is array of pointers now (not an array of structs)!
  * Many simplifications.
  * All basic mutations are done and tested.
    - weight_change_random()
	- synapse_add_random()
	- N.synapse_del()
	- NN.Print()
	- NN.Print_weights()
	- NN.neuron_del(N)
	- NN.neuron_del_random()
	- N.get_random_synapse()
	- N.synapse_del_random()
	- NN.synapse_del_random()
	- NN.neuron_add_random()
  * NN.Dump(), NN.Load() - serialisation and deserialisation of NN into json.
  * NNdef_01.sav - first NeurNet for worms_client in json.

 -- Eugeny Sokolov <esokolov@navigo.su>  Thu, 12 May 2019 17:06:53 +0500


v0.03
  * Concepts of basic mutations.
    - neuron_remove()
	- neuron_del()
	- synapse_add_random()
	- N.weight_change_random()
	- NN.weight_change_random() - wrapper under N.weight_change_random()
	- N.get_random_synapse()
	- N.synapse_del_random()
	- NN.synapse_del_random()
	Neurons not actually deleted, just tagged 'deleted' (due to difficulty of
	reindexing other neurons links). Real removing of neuron cause shifting
	other neurons and changing their pointers. The root of this problem is
	that NN is an array of structures (Neurons), not array of pointers to
	structures.

 -- Eugeny Sokolov <esokolov@navigo.su>  Thu, 12 May 2019 17:06:53 +0500


v0.02

  * Single chanel for one neuron. All input signals are marked by source
  neurons and pushed to the input chanel of linked neuron. So we don't need
  more then one thread for every neuron. So we don't need mutexes.
  * NeurNet Stops if stabilized in binary state (some neuron(s) blinks between two
  values).
  * Reducing cascade rising of signal numbers with many back links.
  Situation like this
  
             -> N0 <-
            |  / \   |
            \_N1  N2_/
  
  leads to unlimited rising of signal numbers. Now this problem is solved
  with pair of blocking and unblocking selects of input. Calc() is started
  after receiving all of signals in the chanel.

 -- Eugeny Sokolov <esokolov@navigo.su>  Thu, 23 Mar 2017 02:13:56 +0500


v0.01

  * First version of multithreaded absolutely asyncronous NeurNet with
  arbitrary structure.
  * No multithread problems with(out) mutexes. (go build --race / go run
  --race).
  * Random constructor of NeurNet.

 -- Eugeny Sokolov <esokolov@navigo.su>  Sun, 12 Mar 2017 01:13:56 +0500
